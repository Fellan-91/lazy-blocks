name: Unit Tests

on:
  pull_request:
  push:
    branches:
      - master
  # Allow manually triggering the workflow.
  workflow_dispatch:

# Cancels all previous workflow runs for pull requests that have not completed.
concurrency:
  # The concurrency group contains the workflow name and the branch name for pull requests
  # or the commit hash for any other events.
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
  cancel-in-progress: true

jobs:
  compute-previous-wordpress-version:
    name: Compute previous WordPress version
    runs-on: self-hosted
    outputs:
      previous-wordpress-version: ${{ steps.get-previous-wordpress-version.outputs.previous-wordpress-version }}

    steps:
      - name: Get previous WordPress version
        id: get-previous-wordpress-version
        run: |
          curl \
            -H "Accept: application/json" \
            -o versions.json \
            "http://api.wordpress.org/core/stable-check/1.0/"
          LATEST_WP_VERSION=$(jq --raw-output 'with_entries(select(.value=="latest"))|keys[]' versions.json)
          IFS='.' read LATEST_WP_MAJOR LATEST_WP_MINOR LATEST_WP_PATCH <<< "${LATEST_WP_VERSION}"
          if [[ ${LATEST_WP_MINOR} == "0" ]]; then
            PREVIOUS_WP_SERIES="$((LATEST_WP_MAJOR - 1)).9"
          else
            PREVIOUS_WP_SERIES="${LATEST_WP_MAJOR}.$((LATEST_WP_MINOR - 1))"
          fi
          PREVIOUS_WP_VERSION=$(jq --raw-output --arg series "${PREVIOUS_WP_SERIES}" 'with_entries(select(.key|startswith($series)))|keys[-1]' versions.json)
          echo "previous-wordpress-version=${PREVIOUS_WP_VERSION}" >> $GITHUB_OUTPUT
          rm versions.json

  test-php:
    name: PHP ${{ matrix.php }}${{ matrix.wordpress != '' && format( ' (WP {0}) ', matrix.wordpress ) || '' }}
    needs: compute-previous-wordpress-version
    runs-on: self-hosted
    timeout-minutes: 20
    if: ${{ github.repository == 'Fellan-91/lazy-blocks' || github.event_name == 'pull_request' }}
    strategy:
      fail-fast: true
      matrix:
        php:
          - '7.4.33'
        wordpress: [''] # Latest WordPress version.
        include:
          # Test with the previous WP version.
          - php: '7.4.33'
            wordpress: ${{ needs.compute-previous-wordpress-version.outputs.previous-wordpress-version }}

    env:
      WP_ENV_PHP_VERSION: ${{ matrix.php }}
      WP_ENV_CORE: ${{ matrix.wordpress == '' && 'WordPress/WordPress' || format( 'https://wordpress.org/wordpress-{0}.zip', matrix.wordpress ) }}

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js and install dependencies
        uses: ./.github/setup-node

      # Ensure that Composer installs the correct versions of packages.
      - name: Override PHP version in composer.json
        run: composer config platform.php ${{ matrix.php }}

      # Since Composer dependencies are installed using `composer update` and no lock file is in version control,
      # passing a custom cache suffix ensures that the cache is flushed at least once per week.
      - name: Install Composer dependencies
        uses: ramsey/composer-install@v2
        with:
          custom-cache-suffix: $(/bin/date -u --date='last Mon' "+%F")

      - name: Npm build
        run: npm run build

      - name: Docker debug information
        run: |
          docker -v
          docker compose version

      - name: Start Docker environment
        run: npm run wp-env start

      - name: Log running Docker containers
        run: docker ps -a

      - name: Docker container debug information
        run: |
          npm run wp-env run tests-mysql mysql -- --version
          npm run wp-env run tests-wordpress php -- --version
          npm run wp-env run tests-wordpress php -m
          npm run wp-env run tests-wordpress php -i
          npm run wp-env run tests-wordpress /var/www/html/wp-content/plugins/lazy-blocks/vendor/bin/phpunit -- --version
          npm run wp-env run tests-wordpress locale -a

      - name: Running unit tests
        run: |
          set -o pipefail
          npm run test:unit:php | tee phpunit.log

      # Verifies that PHPUnit actually runs in the first place. We want visibility
      # into issues which can cause it to fail silently, so we check the output
      # to verify that at least 5 tests have passed. This is an arbitrary
      # number, but makes sure a drastic change doesn't happen without us noticing.
      - name: Check number of passed tests
        run: |
          # Note: relies on PHPUnit execution to fail on test failure.
          # Extract the number of executed tests from the log file.
          if ! num_tests=$(grep -Eo 'OK \([0-9]+ tests' phpunit.log) ; then
            if ! num_tests=$(grep -Eo 'Tests: [0-9]+, Assertions:' phpunit.log) ; then
              echo "PHPUnit failed or did not run. Check the PHPUnit output in the previous step to debug." && exit 1
            fi
          fi
          # Extract just the number of tests from the string.
          num_tests=$(echo "$num_tests" | grep -Eo '[0-9]+')
          if [ $num_tests -lt 5 ] ; then
            echo "Only $num_tests tests passed, which is much fewer than expected." && exit 1
          fi
          echo "$num_tests tests passed."
